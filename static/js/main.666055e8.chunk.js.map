{"version":3,"sources":["components/Icons/Icons.js","pages/Navigationbar/Navigationbar.js","pages/home/Home.js","components/Map/control-panel.js","components/Map/segment-pin.js","components/Map/segment-info.js","components/Map/map-style.js","components/Map/SegmentMap.js","pages/segmentAnalyzer/SegmentAnalyzer.js","pages/animation/animation.js","pages/form/form.js","components/Map/Map.js","components/Map/CityMonitorMap.js","pages/cityMonitor/cityMonitor.js","App.js","serviceWorker.js","index.js"],"names":["id","style","color","href","className","Navigationbar","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","Nav","Link","Component","Home","defaultContainer","children","SliderWithTooltip","createSliderWithTooltip","Slider","distanceFormatter","v","percentFormatter","ControlPanel","props","_renderButton","activity","index","key","type","name","defaultChecked","onClick","filterActivityType","htmlFor","state","Container","this","containerComponent","map","segmentDistance","value","onChange","onSliderChange","onAfterChange","onAfterSliderChange","tipFormatter","min","max","numberOfSegments","onSliderChangeNumberSegments","onAfterSliderChangeNumberSegments","PureComponent","pinStyle","cursor","stroke","CityPin","size","height","viewBox","fill","colorPercent","transform","d","SegmentInfo","info","target","_id","star_count","efforts","date","hour","getHours","minute","getMinutes","day","getDate","monthIndex","getMonth","year","getFullYear","formatDate","Date","time_info_added","dataLayer","fromJS","source","interactive","paint","defaultMapStyle","MAP_STYLE","fullscreenControlStyle","position","top","left","padding","geolocateStyle","margin","navStyle","SegmentMap","_loadData","data","mapStyle","setIn","set","get","push","setState","updateSegmentView","activityType","activityView","segmentUpdate","onClickMap","event","feature","features","focusCountyNumber","parseInt","properties","fylkesnummer","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","viewport","fitBounds","longitude","latitude","zoom","transitionInterpolator","LinearInterpolator","around","offsetCenter","x","y","transitionDuration","width","popupInfo","bind","toogleLoading","requestJson","error","response","tipSize","anchor","start_longitude","start_latitude","closeOnClick","onClose","segmentApiUpdate","mapboxApiAccessToken","process","REACT_APP_MAPBOX_ACCESS_TOKEN","onViewportChange","segments","item","offsetLeft","offsetTop","_renderPopup","positionOptions","enableHighAccuracy","trackUserLocation","camera","scene","renderer","geometry","material","mesh","light","segmentAnalyzerStyle","spinnerStyle","css","SegmentAnalyzer","loading","get_segments","countyNumber","axios","then","res","sizeUnit","Form","useForm","defaultValues","exercise","handleSubmit","register","errors","watch","ExerciseType","ref","message","Exercise","list","onSubmit","values","console","log","animate","requestAnimationFrame","rotation","render","Animation","THREE","window","innerWidth","innerHeight","z","background","add","antialias","setSize","document","body","appendChild","domElement","mount","Map","CityMonitorMap","stations","lat","lon","CLIENT_ID","REACT_APP_CYCLE_IDENTIFIER","CityMonitor","availability","get_stations","get_availability","setInterval","headers","catch","set_station_status","prevState","forEach","station_status","num_bikes_available","num_docks_available","station_index","findIndex","station","station_id","fouroffour","textAlign","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.666055e8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Icons.css\";\n\nexport default () => {\n  return (\n    <div>\n      <span id={\"icon\"}>\n        <a\n          style={{ color: \"inherit\" }}\n          href=\"https://github.com/oddeirikigland\"\n        >\n          <i className=\"fab fa-github mdi-dark\" />\n        </a>\n      </span>\n\n      <span id={\"icon\"}>\n        <a\n          style={{ color: \"inherit\" }}\n          href=\"https://www.linkedin.com/in/odd-eirik-igland-342172155\"\n        >\n          <i className=\"fab fa-linkedin\" />\n        </a>\n      </span>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Navigationbar extends Component {\n  render() {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>\n          <Link to=\"/\">Portfolio</Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link>\n              <Link to=\"/strava\">Segment Analyzer</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/city\">Available City bikes</Link>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Icons from \"../../components/Icons/Icons\";\nimport Navigationbar from \"../Navigationbar/Navigationbar\";\nimport \"./Home.css\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id={\"home\"}>\n        <Navigationbar />\n        <div id={\"container\"}>\n          <Icons />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\n\nimport \"./control-panel.css\";\nimport \"rc-slider/assets/index.css\";\n\nconst defaultContainer = ({ children }) => (\n  <div className=\"control-panel\">{children}</div>\n);\nconst SliderWithTooltip = createSliderWithTooltip(Slider);\n\nfunction distanceFormatter(v) {\n  return `${v} km`;\n}\n\nfunction percentFormatter(v) {\n  return `${v} %`;\n}\n\nexport default class ControlPanel extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activity: [{ type: \"All\" }, { type: \"Run\" }, { type: \"Ride\" }]\n    };\n  }\n  _renderButton = (activity, index) => {\n    return (\n      <div key={`btn-${index}`} className=\"input\">\n        <input\n          type=\"radio\"\n          name=\"activity\"\n          id={`activity-${index}`}\n          defaultChecked={activity.type === \"All\"}\n          onClick={() => this.props.filterActivityType(activity)}\n        />\n        <label htmlFor={`city-${index}`}>{activity.type}</label>\n      </div>\n    );\n  };\n\n  render() {\n    const Container = this.props.containerComponent || defaultContainer;\n\n    return (\n      <Container>\n        <h6>FIND EASISEST SEGMENTS AND GO FOR KOM</h6>\n        They're ranked from green to red. Press a county to zoom in.\n        <p>Filter segment on type of sport</p>\n        {this.state.activity.map(this._renderButton)}\n        Shows segments in {`${this.props.segmentDistance}`} km from where you\n        click\n        <SliderWithTooltip\n          value={this.props.segmentDistance}\n          onChange={this.props.onSliderChange}\n          onAfterChange={this.props.onAfterSliderChange}\n          tipFormatter={distanceFormatter}\n          min={2}\n          max={10000}\n        />\n        Showing {`${this.props.numberOfSegments}`} % of the relevant segments\n        <SliderWithTooltip\n          value={this.props.numberOfSegments}\n          onChange={this.props.onSliderChangeNumberSegments}\n          onAfterChange={this.props.onAfterSliderChangeNumberSegments}\n          tipFormatter={percentFormatter}\n          min={1}\n          max={100}\n        />\n      </Container>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: \"pointer\",\n  stroke: \"none\"\n};\n\nexport default class CityPin extends PureComponent {\n  render() {\n    const { size = 20, onClick } = this.props;\n\n    return (\n      <svg\n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{\n          ...pinStyle,\n          fill:\n            \"rgb(\" +\n            (100 - this.props.colorPercent) * 2.56 +\n            \",\" +\n            this.props.colorPercent * 2.56 +\n            \",0)\",\n          transform: `translate(${-size / 2}px,${-size}px)`\n        }}\n        onClick={onClick}\n      >\n        <path d={ICON} />\n      </svg>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nconst formatDate = date => {\n  const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ];\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n  return `${hour}:${minute} ${day}. ${monthNames[monthIndex]} ${year}`;\n};\n\nexport default class SegmentInfo extends PureComponent {\n  render() {\n    const { info } = this.props;\n    return (\n      <div>\n        <div>\n          {info.name} |{\" \"}\n          <a target=\"_new\" href={`https://www.strava.com/segments/${info._id}`}>\n            View on Strava\n          </a>\n        </div>\n        <p>{`Star count ${info.star_count}`}</p>\n        <p>{`Efforts ${info.efforts}`}</p>\n        <p>{`Info updated ${formatDate(new Date(info.time_info_added))}`}</p>\n      </div>\n    );\n  }\n}\n","import { fromJS } from \"immutable\";\nimport MAP_STYLE from \"./map-style-basic-v8.json\";\n\n// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = fromJS({\n  id: \"data\",\n  source: \"county\",\n  type: \"fill\",\n  interactive: true,\n  paint: {\n    \"fill-color\": [\n      \"match\",\n      [\"get\", \"fylkesnummer\"],\n      [\"01\"],\n      \"#e6194b\",\n      [\"02\"],\n      \"#3cb44b\",\n      [\"04\"],\n      \"#4363d8\",\n      [\"05\"],\n      \"#f58231\",\n      [\"06\"],\n      \"#911eb4\",\n      [\"07\"],\n      \"#46f0f0\",\n      [\"08\"],\n      \"#f032e6\",\n      [\"09\"],\n      \"#bcf60c\",\n      [\"10\"],\n      \"#fabebe\",\n      [\"11\"],\n      \"#008080\",\n      [\"12\"],\n      \"#e6beff\",\n      [\"13\"],\n      \"#9a6324\",\n      [\"14\"],\n      \"#fffac8\",\n      [\"15\"],\n      \"#800000\",\n      [\"16\"],\n      \"#aaffc3\",\n      [\"17\"],\n      \"#808000\",\n      [\"18\"],\n      \"#ffd8b1\",\n      [\"19\"],\n      \"#000075\",\n      [\"20\"],\n      \"#ffe119\",\n      [\"50\"],\n      \"#808080\",\n      \"#ffffff\"\n    ],\n    \"fill-opacity\": 0.3\n  }\n});\n\nexport const defaultMapStyle = fromJS(MAP_STYLE);\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport ReactMapGL, {\n  Marker,\n  Popup,\n  NavigationControl,\n  FullscreenControl,\n  GeolocateControl,\n  LinearInterpolator\n} from \"react-map-gl\";\nimport { fromJS } from \"immutable\";\nimport { json as requestJson } from \"d3-request\";\nimport WebMercatorViewport from \"viewport-mercator-project\";\nimport bbox from \"@turf/bbox\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport ControlPanel from \"./control-panel\";\nimport SegmentPin from \"./segment-pin\";\nimport SegmentInfo from \"./segment-info\";\nimport { defaultMapStyle, dataLayer } from \"./map-style.js\";\n\nconst fullscreenControlStyle = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  padding: \"10px\"\n};\n\nconst geolocateStyle = {\n  position: \"absolute\",\n  top: 36,\n  left: 0,\n  margin: 10\n};\n\nconst navStyle = {\n  position: \"absolute\",\n  top: 72,\n  left: 0,\n  padding: \"10px\"\n};\n\nexport default class SegmentMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: \"100%\",\n        height: \"100vh\",\n        latitude: 65,\n        longitude: 15,\n        zoom: 3.5\n      },\n      popupInfo: null,\n      activityView: \"All\",\n      mapStyle: defaultMapStyle,\n      data: null,\n      segmentDistance: 5000,\n      focusCountyNumber: 0,\n      numberOfSegments: 100\n    };\n    this.onSliderChange = this.onSliderChange.bind(this);\n    this.onAfterSliderChange = this.onAfterSliderChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.toogleLoading();\n    requestJson(\n      \"https://segment-analyzer.herokuapp.com/map/countyNorway\",\n      (error, response) => {\n        this.props.toogleLoading();\n        if (!error) {\n          this._loadData(response);\n          this.segmentUpdate();\n        }\n      }\n    );\n  }\n\n  _loadData = data => {\n    const mapStyle = defaultMapStyle\n      // Add geojson source to map\n      .setIn([\"sources\", \"county\"], fromJS({ type: \"geojson\", data }))\n      // Add point layer to map\n      .set(\"layers\", defaultMapStyle.get(\"layers\").push(dataLayer));\n\n    this.setState({ data, mapStyle });\n  };\n\n  _renderPopup() {\n    const { popupInfo } = this.state;\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.start_longitude}\n          latitude={popupInfo.start_latitude}\n          closeOnClick={false}\n          onClose={() => this.setState({ popupInfo: null })}\n        >\n          <SegmentInfo info={popupInfo} />\n        </Popup>\n      )\n    );\n  }\n\n  updateSegmentView = activityType => {\n    const activityView = activityType.type;\n    this.setState({ activityView }, () => {\n      this.segmentUpdate();\n    });\n  };\n\n  segmentUpdate() {\n    this.props.segmentApiUpdate(\n      this.state.focusCountyNumber,\n      this.state.segmentDistance,\n      this.state.viewport.latitude,\n      this.state.viewport.longitude,\n      this.state.activityView,\n      this.state.numberOfSegments\n    );\n  }\n\n  onClickMap = event => {\n    const feature = event.features[0];\n    if (feature) {\n      const focusCountyNumber = parseInt(feature.properties.fylkesnummer);\n      // calculate the bounding box of the feature\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature);\n      // construct a viewport instance from the current state\n      const viewport = new WebMercatorViewport(this.state.viewport);\n      const { longitude, latitude, zoom } = viewport.fitBounds(\n        [\n          [minLng, minLat],\n          [maxLng, maxLat]\n        ],\n        {\n          padding: 40\n        }\n      );\n\n      this.setState({\n        viewport: {\n          ...this.state.viewport,\n          longitude,\n          latitude,\n          zoom,\n          transitionInterpolator: new LinearInterpolator({\n            around: [event.offsetCenter.x, event.offsetCenter.y]\n          }),\n          transitionDuration: 1000\n        },\n        focusCountyNumber\n      });\n      this.segmentUpdate();\n    }\n  };\n\n  onSliderChange = segmentDistance => {\n    this.setState({\n      segmentDistance\n    });\n  };\n\n  onAfterSliderChange = () => {\n    this.segmentUpdate();\n  };\n\n  onSliderChangeNumberSegments = numberOfSegments => {\n    this.setState({\n      numberOfSegments\n    });\n  };\n\n  onAfterSliderChangeNumberSegments = () => {\n    this.segmentUpdate();\n  };\n\n  render() {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        mapStyle={this.state.mapStyle}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onClick={this.onClickMap}\n        onViewportChange={viewport => this.setState({ viewport })}\n      >\n        {this.props.segments.map((item, index) => (\n          <Marker\n            key={index}\n            latitude={item.start_latitude}\n            longitude={item.start_longitude}\n            offsetLeft={-20}\n            offsetTop={-10}\n          >\n            <SegmentPin\n              onClick={() => this.setState({ popupInfo: item })}\n              colorPercent={item.color}\n            />\n          </Marker>\n        ))}\n\n        {this._renderPopup()}\n\n        <div className=\"fullscreen\" style={fullscreenControlStyle}>\n          <FullscreenControl />\n        </div>\n\n        <GeolocateControl\n          style={geolocateStyle}\n          positionOptions={{ enableHighAccuracy: true }}\n          trackUserLocation={true}\n        />\n\n        <div className=\"nav\" style={navStyle}>\n          <NavigationControl />\n        </div>\n\n        <ControlPanel\n          containerComponent={this.props.containerComponent}\n          filterActivityType={this.updateSegmentView}\n          segmentDistance={this.state.segmentDistance}\n          onSliderChange={this.onSliderChange}\n          onAfterSliderChange={this.onAfterSliderChange}\n          numberOfSegments={this.state.numberOfSegments}\n          onSliderChangeNumberSegments={this.onSliderChangeNumberSegments}\n          onAfterSliderChangeNumberSegments={\n            this.onAfterSliderChangeNumberSegments\n          }\n        />\n      </ReactMapGL>\n    );\n  }\n}\n\nexport function renderToDom(container) {\n  render(<SegmentMap />, container);\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { css } from \"@emotion/core\";\nimport RingLoader from \"react-spinners/RingLoader\";\n\nimport SegmentMap from \"../../components/Map/SegmentMap\";\n\nconst segmentAnalyzerStyle = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nconst spinnerStyle = css`\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  position: absolute;\n  z-index: 99;\n`;\n\nexport default class SegmentAnalyzer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      segments: [],\n      loading: false\n    };\n    this.get_segments = this.get_segments.bind(this);\n    this.segmentApiUpdate = this.segmentApiUpdate.bind(this);\n    this.toogleLoading = this.toogleLoading.bind(this);\n  }\n\n  get_segments(\n    countyNumber,\n    segmentDistance,\n    latitude,\n    longitude,\n    activityView,\n    numberOfSegments\n  ) {\n    const loading = true;\n    this.setState({ loading });\n\n    axios\n      .get(\n        `https://segment-analyzer.herokuapp.com/strava_segments?county_number=${countyNumber}&segment_distance=${segmentDistance}&latitude=${latitude}&longitude=${longitude}&activity_view=${activityView}&number_of_segments=${numberOfSegments}`\n      )\n      .then(res => {\n        const segments = res.data;\n        const loading = false;\n        this.setState({ segments, loading });\n      });\n  }\n\n  segmentApiUpdate(\n    countyNumber,\n    segmentDistance,\n    latitude,\n    longitude,\n    activityView,\n    numberOfSegments\n  ) {\n    this.get_segments(\n      countyNumber,\n      segmentDistance,\n      latitude,\n      longitude,\n      activityView,\n      numberOfSegments\n    );\n  }\n\n  toogleLoading() {\n    this.setState({ loading: !this.state.loading });\n  }\n\n  render() {\n    return (\n      <div id={\"segmentAnalyzer\"} style={segmentAnalyzerStyle}>\n        <RingLoader\n          css={spinnerStyle}\n          sizeUnit={\"px\"}\n          size={150}\n          color={\"#36D7B7\"}\n          loading={this.state.loading}\n        />\n        <SegmentMap\n          segments={this.state.segments}\n          segmentApiUpdate={this.segmentApiUpdate}\n          toogleLoading={this.toogleLoading}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nvar camera, scene, renderer;\nvar geometry, material, mesh;\nvar light;\n\nfunction init() {\n  camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    10\n  );\n  camera.position.z = 1;\n\n  scene = new THREE.Scene();\n  scene.background = new THREE.Color(\"lightgray\");\n\n  light = new THREE.DirectionalLight(0xffffff);\n  light.position.set(0, 20, 10);\n  scene.add(light);\n\n  geometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);\n  material = new THREE.MeshNormalMaterial();\n  mesh = new THREE.Mesh(geometry, material);\n  scene.add(mesh);\n\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  mesh.rotation.x += 0.05;\n  mesh.rotation.y += 0.0;\n\n  renderer.render(scene, camera);\n}\n\nexport default class Animation extends Component {\n  componentDidMount() {\n    init();\n    animate();\n  }\n\n  render() {\n    return <div ref={ref => (this.mount = ref)} />;\n  }\n}\n","import React from \"react\";\nimport useForm from \"react-hook-form\";\n\nimport \"./form.css\";\n\nconst Form = () => {\n  const { handleSubmit, register, errors, watch } = useForm({\n    defaultValues: {\n      exercise: \"11\"\n    }\n  });\n  const onSubmit = values => {\n    console.log(values);\n  };\n\n  const ExerciseType = ({ item }) => (\n    <div className=\"form-group row\" key={item.name}>\n      <label className=\"control-label col-sm-2\" htmlFor={item.name}>\n        {item.name}\n      </label>\n      <div className=\"col-sm-10\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          name={item}\n          ref={register}\n        />\n      </div>\n      {errors.item && errors.item.message}\n    </div>\n  );\n\n  const Exercise = ({ list }) =>\n    list.map(item => <ExerciseType item={item} key={item.name} />);\n\n  const exercises = {\n    \"11\": [{ name: \"squat\" }, { name: \"curl\" }],\n    \"12\": [{ name: \"deadlift\" }, { name: \"dance\" }],\n    \"13\": [{ name: \"asd\" }]\n  };\n\n  return (\n    <form className=\"form-horizontal\" onSubmit={handleSubmit(onSubmit)}>\n      <fieldset className=\"form-group\">\n        <div className=\"row\">\n          <legend className=\"col-form-label col-sm-2 pt-0\">Exercise</legend>\n          <div className=\"col-sm-10\">\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"exercise\"\n                id=\"11\"\n                value=\"11\"\n                ref={register}\n                defaultChecked\n              />\n              <label className=\"form-check-label\" htmlFor=\"11\">\n                11\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"exercise\"\n                id=\"12\"\n                value=\"12\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"12\">\n                12\n              </label>\n            </div>\n            <div className=\"form-check disabled\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"exercise\"\n                id=\"13\"\n                value=\"13\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"13\">\n                13\n              </label>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n\n      <Exercise list={exercises[watch(\"exercise\")]} />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport ReactMapGL from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: \"100%\",\n        height: \"100vh\",\n        latitude: 63.42957,\n        longitude: 10.39844,\n        zoom: 12\n      }\n    };\n  }\n\n  render() {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        mapStyle={this.props.mapStyle}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onClick={this.props.onClick}\n        onViewportChange={viewport => this.setState({ viewport })}\n      >\n        {this.props.children}\n      </ReactMapGL>\n    );\n  }\n}\n\nexport function renderToDom(container) {\n  render(<Map />, container);\n}\n","import React, { Component } from \"react\";\nimport Map from \"./Map\";\n\nimport { Marker } from \"react-map-gl\";\nimport SegmentPin from \"./segment-pin\";\nimport { defaultMapStyle } from \"./map-style.js\";\n\nexport default class CityMonitorMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapStyle: defaultMapStyle\n    };\n  }\n\n  render() {\n    return (\n      <Map mapStyle={this.state.mapStyle}>\n        {this.props.stations.map((item, index) => (\n          <Marker key={index} latitude={item.lat} longitude={item.lon}>\n            <SegmentPin\n              onClick={() => this.setState({ popupInfo: item })}\n              colorPercent={item.color}\n            />\n          </Marker>\n        ))}\n      </Map>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport CityMonitorMap from \"../../components/Map/CityMonitorMap\";\n\nconst CLIENT_ID = process.env.REACT_APP_CYCLE_IDENTIFIER;\n\nconst segmentAnalyzerStyle = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nexport default class CityMonitor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      stations: [],\n      availability: []\n    };\n    this.get_stations = this.get_stations.bind(this);\n    this.get_availability = this.get_availability.bind(this);\n  }\n\n  componentDidMount() {\n    this.get_stations();\n    this.get_availability();\n    setInterval(() => this.get_availability(), 11000);\n  }\n\n  get_stations() {\n    const URL =\n      \"https://gbfs.urbansharing.com/trondheimbysykkel.no/station_information.json\";\n\n    axios\n      .get(URL, { headers: { \"Client-Identifier\": CLIENT_ID } })\n      .then(res => {\n        const stations = res.data.data.stations;\n        this.setState({ stations });\n      })\n      .catch(error => {\n        console.log(\"error 3 \" + error);\n      });\n  }\n\n  get_availability() {\n    const URL =\n      \"https://gbfs.urbansharing.com/trondheimbysykkel.no/station_status.json\";\n\n    axios\n      .get(URL, { headers: { \"Client-Identifier\": CLIENT_ID } })\n      .then(res => {\n        const availability = res.data.data.stations;\n        this.setState({ availability }, () => this.set_station_status());\n      })\n      .catch(error => {\n        console.log(\"error 3 \" + error);\n      });\n  }\n\n  set_station_status() {\n    this.setState(prevState => {\n      const stations = [...prevState.stations];\n\n      this.state.availability.forEach(station_status => {\n        const color =\n          (100 * station_status.num_bikes_available) /\n          station_status.num_docks_available;\n        const station_index = stations.findIndex(\n          station => station.station_id === station_status.station_id\n        );\n        if (typeof stations[station_index] !== \"undefined\") {\n          stations[station_index].color = color;\n        }\n      });\n\n      return { stations };\n    });\n  }\n\n  render() {\n    return (\n      <div id={\"cityMonitor\"} style={segmentAnalyzerStyle}>\n        <CityMonitorMap stations={this.state.stations} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/home/Home\";\nimport SegmentAnalyzer from \"./pages/segmentAnalyzer/SegmentAnalyzer\";\nimport Form from \"./pages/form/form\";\nimport Animation from \"./pages/animation/animation\";\nimport CityMonitor from \"./pages/cityMonitor/cityMonitor\";\n\nconst fouroffour = () => (\n  <div\n    style={{\n      position: \"absolute\",\n      width: \"100%\",\n      top: \"50%\",\n      textAlign: \"center\"\n    }}\n  >\n    Siden du ser etter finnes ikke.\n  </div>\n);\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path={\"/\"} component={Home} />\n          <Route path={\"/strava\"} component={SegmentAnalyzer} />\n          <Route path={\"/form\"} component={Form} />\n          <Route path={\"/animation\"} component={Animation} />\n          <Route path={\"/city\"} component={CityMonitor} />\n          <Route component={fouroffour} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}