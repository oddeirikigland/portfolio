{"version":3,"sources":["pages/animation/animation.js","serviceWorker.js","components/Icons/Icons.js","pages/cards/CardComp.js","pages/home/Home.js","components/Map/control-panel.js","components/Map/segment-pin.js","components/Map/segment-info.js","components/Map/map-style.js","components/Map/SegmentMap.js","pages/segmentAnalyzer/SegmentAnalyzer.js","pages/form/form.js","components/Map/Map.js","components/Map/CityMonitorMap.js","pages/cityMonitor/cityMonitor.js","App.js","index.js"],"names":["camera","scene","renderer","geometry","material","mesh","light","animate","global","requestAnimationFrame","rotation","x","y","render","Animation","Component","componentDidMount","THREE","window","innerWidth","innerHeight","position","z","background","set","add","antialias","setSize","document","body","appendChild","domElement","ref","this","mount","Boolean","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","Icons","id","style","color","href","className","CardComp","props","Card","width","Body","Title","title","Text","text","to","link","Button","onClick","cardClicked","ReactGA","pageview","variant","projects","Home","columns","minRowHeight","map","project","key","defaultContainer","children","SliderWithTooltip","createSliderWithTooltip","Slider","distanceFormatter","v","percentFormatter","ControlPanel","PureComponent","constructor","super","state","activity","type","_renderButton","index","name","defaultChecked","filterActivityType","htmlFor","Container","containerComponent","segmentDistance","value","onChange","onSliderChange","onAfterChange","onAfterSliderChange","tipFormatter","min","max","numberOfSegments","onSliderChangeNumberSegments","onAfterSliderChangeNumberSegments","pinStyle","cursor","stroke","CityPin","size","height","viewBox","fill","colorPercent","transform","d","SegmentInfo","info","target","_id","star_count","efforts","date","hour","getHours","minute","getMinutes","day","getDate","monthIndex","getMonth","year","getFullYear","formatDate","Date","time_info_added","dataLayer","fromJS","source","interactive","paint","defaultMapStyle","MAP_STYLE","fullscreenControlStyle","top","left","padding","geolocateStyle","margin","navStyle","SegmentMap","viewport","latitude","longitude","zoom","popupInfo","activityView","mapStyle","data","focusCountyNumber","handleOnSliderChange","bind","handleOnAfterSliderChange","toogleLoading","requestJson","error","response","_loadData","segmentUpdate","setIn","get","push","setState","_renderPopup","tipSize","anchor","start_longitude","start_latitude","closeOnClick","onClose","updateSegmentView","activityType","segmentApiUpdate","handleOnClickMap","event","feature","features","parseInt","properties","fylkesnummer","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","fitBounds","transitionInterpolator","LinearInterpolator","around","offsetCenter","transitionDuration","handleOnSliderChangeNumberSegments","handleOnAfterSliderChangeNumberSegments","mapboxApiAccessToken","process","onViewportChange","segments","item","offsetLeft","offsetTop","positionOptions","enableHighAccuracy","trackUserLocation","segmentAnalyzerStyle","spinnerStyle","css","SegmentAnalyzer","loading","getSegments","countyNumber","axios","res","sizeUnit","Form","useForm","defaultValues","exercise","handleSubmit","register","errors","watch","ExerciseType","message","Exercise","list","onSubmit","values","console","log","11","12","13","Map","CityMonitorMap","stations","lat","lon","CityMonitor","availability","getStations","getAvailability","setInterval","headers","catch","setStationStatus","prevState","forEach","stationStatus","num_bikes_available","num_docks_available","stationIndex","findIndex","station","station_id","initialize","fouroffour","textAlign","redirectToUrl","urlAddress","App","basename","exact","path","component","config","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.3aca5a84.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three'\n\nvar camera, scene, renderer\nvar geometry, material, mesh\nvar light\n\nfunction init () {\n  camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    10\n  )\n  camera.position.z = 1\n\n  scene = new THREE.Scene()\n  scene.background = new THREE.Color('lightgray')\n\n  light = new THREE.DirectionalLight(0xffffff)\n  light.position.set(0, 20, 10)\n  scene.add(light)\n\n  geometry = new THREE.BoxGeometry(0.1, 0.1, 0.1)\n  material = new THREE.MeshNormalMaterial()\n  mesh = new THREE.Mesh(geometry, material)\n  scene.add(mesh)\n\n  renderer = new THREE.WebGLRenderer({ antialias: true })\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  document.body.appendChild(renderer.domElement)\n}\n\nfunction animate () {\n  global.requestAnimationFrame(animate)\n\n  mesh.rotation.x += 0.05\n  mesh.rotation.y += 0.0\n\n  renderer.render(scene, camera)\n}\n\nexport default class Animation extends Component {\n  componentDidMount () {\n    init()\n    animate()\n  }\n\n  render () {\n    return <div ref={ref => (this.mount = ref)} />\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  global.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport './Icons.css'\n\nconst Icons = () => {\n  return (\n    <div>\n      <span id='icon'>\n        <a\n          style={{ color: 'inherit' }}\n          href='https://github.com/oddeirikigland'\n        >\n          <i className='fab fa-github mdi-dark' />\n        </a>\n      </span>\n\n      <span id='icon'>\n        <a\n          style={{ color: 'inherit' }}\n          href='https://www.linkedin.com/in/odd-eirik-igland-342172155'\n        >\n          <i className='fab fa-linkedin' />\n        </a>\n      </span>\n    </div>\n  )\n}\n\nexport default Icons\n","import React from 'react'\nimport { Card, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport ReactGA from 'react-ga'\n\nconst cardClicked = link => {\n  if (process.env.NODE_ENV === 'production') {\n    ReactGA.pageview('/' + link)\n  }\n}\n\nconst CardComp = props => {\n  return (\n    <Card style={{ width: '18rem' }}>\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Text>{props.text}</Card.Text>\n        <Link to={props.link}>\n          <Button onClick={() => cardClicked(props.link)} variant='primary'>Take a look</Button>\n        </Link>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default CardComp\n","import React, { Component } from 'react'\nimport Icons from '../../components/Icons/Icons'\nimport './Home.css'\nimport CardComp from '../cards/CardComp'\nimport { Grid, Cell } from 'styled-css-grid'\n\nconst projects = [\n  {\n    title: 'Segment Map',\n    text: 'Shows information about Strava segments in a map.',\n    link: 'strava'\n  },\n  {\n    title: 'Segment Table',\n    text:\n      'The user logs in to Strava. The table contains the logged in users segment efforts on the last activities. Sorts the segments after their difficulty to get the KOM.',\n    link: 'strava_table'\n  },\n  {\n    title: 'City bike',\n    text:\n      'Shows available city bikes in Trondheim. Green pin means many bikes, while red means few available bikes. Realtime data.',\n    link: 'city'\n  },\n  {\n    title: 'Smart Display for Homes',\n    text:\n      'It is intended to be non portable and placed e.g. in the hall. The need of easy accessible information is convenient in a busy everyday life. The display is a enhanced version of a notice board that changes according to who is looking at it.',\n    link: 'ambient'\n  },\n  {\n    title: 'Restarts in Julia',\n    text:\n      'Handling of exceptional situations in Julia, including use of restarts. This is the documentation for the project.',\n    link: 'restart_in_julia'\n  },\n  {\n    title: 'Regression modelling',\n    text:\n      'The main purpose of this project is to predict how many people that will come to work at Telenor Fornebu, for up to x into the future.',\n    link: 'pred_telenor'\n  }\n]\n\nexport default class Home extends Component {\n  render () {\n    return (\n      <div id='home'>\n        <div id='container'>\n          <header>Welcome to my site!</header>\n          <p>Check out my projects below</p>\n          <Icons />\n        </div>\n        <div id='grid'>\n          <Grid\n            columns='repeat(auto-fit, minmax(120px, 286px))'\n            minRowHeight='45px'\n          >\n            {projects.map(project => (\n              <Cell key={project.link}>\n                <CardComp\n                  title={project.title}\n                  text={project.text}\n                  link={project.link}\n                />\n              </Cell>\n            ))}\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Slider, { createSliderWithTooltip } from 'rc-slider'\n\nimport './control-panel.css'\nimport 'rc-slider/assets/index.css'\n\nconst defaultContainer = ({ children }) => (\n  <div className='control-panel'>{children}</div>\n)\nconst SliderWithTooltip = createSliderWithTooltip(Slider)\n\nfunction distanceFormatter (v) {\n  return `${v} km`\n}\n\nfunction percentFormatter (v) {\n  return `${v} %`\n}\n\nexport default class ControlPanel extends PureComponent {\n  constructor (props) {\n    super(props)\n    this.state = {\n      activity: [{ type: 'All' }, { type: 'Run' }, { type: 'Ride' }]\n    }\n  }\n\n  _renderButton (activity, index) {\n    return (\n      <div key={`btn-${index}`} className='input'>\n        <input\n          type='radio'\n          name='activity'\n          id={`activity-${index}`}\n          defaultChecked={activity.type === 'All'}\n          onClick={() => this.props.filterActivityType(activity)}\n        />\n        <label htmlFor={`city-${index}`}>{activity.type}</label>\n      </div>\n    )\n  };\n\n  render () {\n    const Container = this.props.containerComponent || defaultContainer\n\n    return (\n      <Container>\n        <h6>FIND EASISEST SEGMENTS AND GO FOR KOM</h6>\n        They are ranked from green to red. Press a county to zoom in.\n        <p>Filter segment on type of sport</p>\n        {this.state.activity.map(this._renderButton)}\n        Shows segments in {`${this.props.segmentDistance}`} km from where you\n        click\n        <SliderWithTooltip\n          value={this.props.segmentDistance}\n          onChange={this.props.onSliderChange}\n          onAfterChange={this.props.onAfterSliderChange}\n          tipFormatter={distanceFormatter}\n          min={2}\n          max={10000}\n        />\n        Showing {`${this.props.numberOfSegments}`} % of the relevant segments\n        <SliderWithTooltip\n          value={this.props.numberOfSegments}\n          onChange={this.props.onSliderChangeNumberSegments}\n          onAfterChange={this.props.onAfterSliderChangeNumberSegments}\n          tipFormatter={percentFormatter}\n          min={1}\n          max={100}\n        />\n      </Container>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`\n\nconst pinStyle = {\n  cursor: 'pointer',\n  stroke: 'none'\n}\n\nexport default class CityPin extends PureComponent {\n  render () {\n    const { size = 20, onClick } = this.props\n\n    return (\n      <svg\n        height={size}\n        viewBox='0 0 24 24'\n        style={{\n          ...pinStyle,\n          fill:\n            'rgb(' +\n            (100 - this.props.colorPercent) * 2.56 +\n            ',' +\n            this.props.colorPercent * 2.56 +\n            ',0)',\n          transform: `translate(${-size / 2}px,${-size}px)`\n        }}\n        onClick={onClick}\n      >\n        <path d={ICON} />\n      </svg>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\n\nconst formatDate = date => {\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  const hour = date.getHours()\n  const minute = date.getMinutes()\n  const day = date.getDate()\n  const monthIndex = date.getMonth()\n  const year = date.getFullYear()\n  return `${hour}:${minute} ${day}. ${monthNames[monthIndex]} ${year}`\n}\n\nexport default class SegmentInfo extends PureComponent {\n  render () {\n    const { info } = this.props\n    return (\n      <div>\n        <div>\n          {info.name} |{' '}\n          <a target='_new' href={`https://www.strava.com/segments/${info._id}`}>\n            View on Strava\n          </a>\n        </div>\n        <p>{`Star count ${info.star_count}`}</p>\n        <p>{`Efforts ${info.efforts}`}</p>\n        <p>{`Info updated ${formatDate(new Date(info.time_info_added))}`}</p>\n      </div>\n    )\n  }\n}\n","import { fromJS } from 'immutable'\nimport MAP_STYLE from './map-style-basic-v8.json'\n\n// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = fromJS({\n  id: 'data',\n  source: 'county',\n  type: 'fill',\n  interactive: true,\n  paint: {\n    'fill-color': [\n      'match',\n      ['get', 'fylkesnummer'],\n      ['01'],\n      '#e6194b',\n      ['02'],\n      '#3cb44b',\n      ['04'],\n      '#4363d8',\n      ['05'],\n      '#f58231',\n      ['06'],\n      '#911eb4',\n      ['07'],\n      '#46f0f0',\n      ['08'],\n      '#f032e6',\n      ['09'],\n      '#bcf60c',\n      ['10'],\n      '#fabebe',\n      ['11'],\n      '#008080',\n      ['12'],\n      '#e6beff',\n      ['13'],\n      '#9a6324',\n      ['14'],\n      '#fffac8',\n      ['15'],\n      '#800000',\n      ['16'],\n      '#aaffc3',\n      ['17'],\n      '#808000',\n      ['18'],\n      '#ffd8b1',\n      ['19'],\n      '#000075',\n      ['20'],\n      '#ffe119',\n      ['50'],\n      '#808080',\n      '#ffffff'\n    ],\n    'fill-opacity': 0.3\n  }\n})\n\nexport const defaultMapStyle = fromJS(MAP_STYLE)\n","import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport ReactMapGL, {\n  Marker,\n  Popup,\n  NavigationControl,\n  FullscreenControl,\n  GeolocateControl,\n  LinearInterpolator\n} from 'react-map-gl'\nimport { fromJS } from 'immutable'\nimport { json as requestJson } from 'd3-request'\nimport WebMercatorViewport from 'viewport-mercator-project'\nimport bbox from '@turf/bbox'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nimport ControlPanel from './control-panel'\nimport SegmentPin from './segment-pin'\nimport SegmentInfo from './segment-info'\nimport { defaultMapStyle, dataLayer } from './map-style.js'\n\nconst fullscreenControlStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n}\n\nconst geolocateStyle = {\n  position: 'absolute',\n  top: 36,\n  left: 0,\n  margin: 10\n}\n\nconst navStyle = {\n  position: 'absolute',\n  top: 72,\n  left: 0,\n  padding: '10px'\n}\n\nexport default class SegmentMap extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      viewport: {\n        width: '100%',\n        height: '100vh',\n        latitude: 65,\n        longitude: 15,\n        zoom: 3.5\n      },\n      popupInfo: null,\n      activityView: 'All',\n      mapStyle: defaultMapStyle,\n      data: null,\n      segmentDistance: 5000,\n      focusCountyNumber: 0,\n      numberOfSegments: 100\n    }\n    this.handleOnSliderChange = this.handleOnSliderChange.bind(this)\n    this.handleOnAfterSliderChange = this.handleOnAfterSliderChange.bind(this)\n  }\n\n  componentDidMount () {\n    this.props.toogleLoading()\n    requestJson(\n      'https://segment-analyzer.herokuapp.com/map/countyNorway',\n      (error, response) => {\n        this.props.toogleLoading()\n        if (!error) {\n          this._loadData(response)\n          this.segmentUpdate()\n        }\n      }\n    )\n  }\n\n  _loadData (data) {\n    const mapStyle = defaultMapStyle\n      // Add geojson source to map\n      .setIn(['sources', 'county'], fromJS({ type: 'geojson', data }))\n      // Add point layer to map\n      .set('layers', defaultMapStyle.get('layers').push(dataLayer))\n\n    this.setState({ data, mapStyle })\n  };\n\n  _renderPopup () {\n    const { popupInfo } = this.state\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor='top'\n          longitude={popupInfo.start_longitude}\n          latitude={popupInfo.start_latitude}\n          closeOnClick={false}\n          onClose={() => this.setState({ popupInfo: null })}\n        >\n          <SegmentInfo info={popupInfo} />\n        </Popup>\n      )\n    )\n  }\n\n  updateSegmentView (activityType) {\n    const activityView = activityType.type\n    this.setState({ activityView }, () => {\n      this.segmentUpdate()\n    })\n  };\n\n  segmentUpdate () {\n    this.props.segmentApiUpdate(\n      this.state.focusCountyNumber,\n      this.state.segmentDistance,\n      this.state.viewport.latitude,\n      this.state.viewport.longitude,\n      this.state.activityView,\n      this.state.numberOfSegments\n    )\n  }\n\n  handleOnClickMap (event) {\n    const feature = event.features[0]\n    if (feature) {\n      const focusCountyNumber = parseInt(feature.properties.fylkesnummer)\n      // calculate the bounding box of the feature\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature)\n      // construct a viewport instance from the current state\n      const viewport = new WebMercatorViewport(this.state.viewport)\n      const { longitude, latitude, zoom } = viewport.fitBounds(\n        [\n          [minLng, minLat],\n          [maxLng, maxLat]\n        ],\n        {\n          padding: 40\n        }\n      )\n\n      this.setState({\n        viewport: {\n          ...this.state.viewport,\n          longitude,\n          latitude,\n          zoom,\n          transitionInterpolator: new LinearInterpolator({\n            around: [event.offsetCenter.x, event.offsetCenter.y]\n          }),\n          transitionDuration: 1000\n        },\n        focusCountyNumber\n      })\n      this.segmentUpdate()\n    }\n  };\n\n  handleOnSliderChange (segmentDistance) {\n    this.setState({\n      segmentDistance\n    })\n  };\n\n  handleOnAfterSliderChange () {\n    this.segmentUpdate()\n  };\n\n  handleOnSliderChangeNumberSegments (numberOfSegments) {\n    this.setState({\n      numberOfSegments\n    })\n  };\n\n  handleOnAfterSliderChangeNumberSegments () {\n    this.segmentUpdate()\n  };\n\n  render () {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        mapStyle={this.state.mapStyle}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onClick={this.handleOnClickMap}\n        onViewportChange={viewport => this.setState({ viewport })}\n      >\n        {this.props.segments.map((item, index) => (\n          <Marker\n            key={index}\n            latitude={item.start_latitude}\n            longitude={item.start_longitude}\n            offsetLeft={-20}\n            offsetTop={-10}\n          >\n            <SegmentPin\n              onClick={() => this.setState({ popupInfo: item })}\n              colorPercent={item.color}\n            />\n          </Marker>\n        ))}\n\n        {this._renderPopup()}\n\n        <div className='fullscreen' style={fullscreenControlStyle}>\n          <FullscreenControl />\n        </div>\n\n        <GeolocateControl\n          style={geolocateStyle}\n          positionOptions={{ enableHighAccuracy: true }}\n          trackUserLocation\n        />\n\n        <div className='nav' style={navStyle}>\n          <NavigationControl />\n        </div>\n\n        <ControlPanel\n          containerComponent={this.props.containerComponent}\n          filterActivityType={this.updateSegmentView}\n          segmentDistance={this.state.segmentDistance}\n          onSliderChange={this.handleOnSliderChange}\n          onAfterSliderChange={this.handleOnAfterSliderChange}\n          numberOfSegments={this.state.numberOfSegments}\n          onSliderChangeNumberSegments={this.handleOnSliderChangeNumberSegments}\n          onAfterSliderChangeNumberSegments={\n            this.handleOnAfterSliderChangeNumberSegments\n          }\n        />\n      </ReactMapGL>\n    )\n  }\n}\n\nexport function renderToDom (container) {\n  render(<SegmentMap />, container)\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { css } from '@emotion/core'\nimport RingLoader from 'react-spinners/RingLoader'\n\nimport SegmentMap from '../../components/Map/SegmentMap'\n\nconst segmentAnalyzerStyle = {\n  width: '100%',\n  height: '100%'\n}\n\nconst spinnerStyle = css`\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  position: absolute;\n  z-index: 99;\n`\n\nexport default class SegmentAnalyzer extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      segments: [],\n      loading: false\n    }\n    this.getSegments = this.getSegments.bind(this)\n    this.segmentApiUpdate = this.segmentApiUpdate.bind(this)\n    this.toogleLoading = this.toogleLoading.bind(this)\n  }\n\n  getSegments (\n    countyNumber,\n    segmentDistance,\n    latitude,\n    longitude,\n    activityView,\n    numberOfSegments\n  ) {\n    const loading = true\n    this.setState({ loading })\n\n    axios\n      .get(\n        `https://segment-analyzer.herokuapp.com/strava_segments?county_number=${countyNumber}&segment_distance=${segmentDistance}&latitude=${latitude}&longitude=${longitude}&activity_view=${activityView}&number_of_segments=${numberOfSegments}`\n      )\n      .then(res => {\n        const segments = res.data\n        const loading = false\n        this.setState({ segments, loading })\n      })\n  }\n\n  segmentApiUpdate (\n    countyNumber,\n    segmentDistance,\n    latitude,\n    longitude,\n    activityView,\n    numberOfSegments\n  ) {\n    this.getSegments(\n      countyNumber,\n      segmentDistance,\n      latitude,\n      longitude,\n      activityView,\n      numberOfSegments\n    )\n  }\n\n  toogleLoading () {\n    this.setState({ loading: !this.state.loading })\n  }\n\n  render () {\n    return (\n      <div id='segmentAnalyzer' style={segmentAnalyzerStyle}>\n        <RingLoader\n          css={spinnerStyle}\n          sizeUnit='px'\n          size={150}\n          color='#36D7B7'\n          loading={this.state.loading}\n        />\n        <SegmentMap\n          segments={this.state.segments}\n          segmentApiUpdate={this.segmentApiUpdate}\n          toogleLoading={this.toogleLoading}\n        />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport useForm from 'react-hook-form'\n\nimport './form.css'\n\nconst Form = () => {\n  const { handleSubmit, register, errors, watch } = useForm({\n    defaultValues: {\n      exercise: '11'\n    }\n  })\n  const onSubmit = values => {\n    console.log(values)\n  }\n\n  const ExerciseType = ({ item }) => (\n    <div className='form-group row' key={item.name}>\n      <label className='control-label col-sm-2' htmlFor={item.name}>\n        {item.name}\n      </label>\n      <div className='col-sm-10'>\n        <input\n          type='text'\n          className='form-control'\n          name={item}\n          ref={register}\n        />\n      </div>\n      {errors.item && errors.item.message}\n    </div>\n  )\n\n  const Exercise = ({ list }) =>\n    list.map(item => <ExerciseType item={item} key={item.name} />)\n\n  const exercises = {\n    11: [{ name: 'squat' }, { name: 'curl' }],\n    12: [{ name: 'deadlift' }, { name: 'dance' }],\n    13: [{ name: 'asd' }]\n  }\n\n  return (\n    <form className='form-horizontal' onSubmit={handleSubmit(onSubmit)}>\n      <fieldset className='form-group'>\n        <div className='row'>\n          <legend className='col-form-label col-sm-2 pt-0'>Exercise</legend>\n          <div className='col-sm-10'>\n            <div className='form-check'>\n              <input\n                className='form-check-input'\n                type='radio'\n                name='exercise'\n                id='11'\n                value='11'\n                ref={register}\n                defaultChecked\n              />\n              <label className='form-check-label' htmlFor='11'>\n                11\n              </label>\n            </div>\n            <div className='form-check'>\n              <input\n                className='form-check-input'\n                type='radio'\n                name='exercise'\n                id='12'\n                value='12'\n                ref={register}\n              />\n              <label className='form-check-label' htmlFor='12'>\n                12\n              </label>\n            </div>\n            <div className='form-check disabled'>\n              <input\n                className='form-check-input'\n                type='radio'\n                name='exercise'\n                id='13'\n                value='13'\n                ref={register}\n              />\n              <label className='form-check-label' htmlFor='13'>\n                13\n              </label>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n\n      <Exercise list={exercises[watch('exercise')]} />\n\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n\nexport default Form\n","import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport ReactMapGL from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nexport default class Map extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      viewport: {\n        width: '100%',\n        height: '100vh',\n        latitude: 63.42957,\n        longitude: 10.39844,\n        zoom: 12\n      }\n    }\n  }\n\n  render () {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        mapStyle={this.props.mapStyle}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onClick={this.props.onClick}\n        onViewportChange={viewport => this.setState({ viewport })}\n      >\n        {this.props.children}\n      </ReactMapGL>\n    )\n  }\n}\n\nexport function renderToDom (container) {\n  render(<Map />, container)\n}\n","import React, { Component } from 'react'\nimport Map from './Map'\n\nimport { Marker } from 'react-map-gl'\nimport SegmentPin from './segment-pin'\nimport { defaultMapStyle } from './map-style.js'\n\nexport default class CityMonitorMap extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      mapStyle: defaultMapStyle\n    }\n  }\n\n  render () {\n    return (\n      <Map mapStyle={this.state.mapStyle}>\n        {this.props.stations.map((item, index) => (\n          <Marker key={index} latitude={item.lat} longitude={item.lon}>\n            <SegmentPin\n              onClick={() => this.setState({ popupInfo: item })}\n              colorPercent={item.color}\n            />\n          </Marker>\n        ))}\n      </Map>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport RingLoader from 'react-spinners/RingLoader'\nimport { css } from '@emotion/core'\nimport CityMonitorMap from '../../components/Map/CityMonitorMap'\n\nconst CLIENT_ID = process.env.REACT_APP_CYCLE_IDENTIFIER\n\nconst segmentAnalyzerStyle = {\n  width: '100%',\n  height: '100%'\n}\n\nconst spinnerStyle = css`\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  position: absolute;\n  z-index: 99;\n`\n\nexport default class CityMonitor extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      loading: false,\n      stations: [],\n      availability: []\n    }\n    this.getStations = this.getStations.bind(this)\n    this.getAvailability = this.getAvailability.bind(this)\n  }\n\n  async componentDidMount () {\n    this.setState({ loading: true })\n    await this.getStations()\n    await this.getAvailability()\n    setInterval(() => this.getAvailability(), 11000)\n  }\n\n  async getStations () {\n    const URL =\n      'https://gbfs.urbansharing.com/trondheimbysykkel.no/station_information.json'\n\n    axios\n      .get(URL, { headers: { 'Client-Identifier': CLIENT_ID } })\n      .then(res => {\n        const stations = res.data.data.stations\n        this.setState({ stations })\n      })\n      .catch(error => {\n        console.log('error 3 ' + error)\n      })\n  }\n\n  async getAvailability () {\n    this.setState({ loading: true })\n    const URL =\n      'https://gbfs.urbansharing.com/trondheimbysykkel.no/station_status.json'\n\n    axios\n      .get(URL, { headers: { 'Client-Identifier': CLIENT_ID } })\n      .then(res => {\n        const availability = res.data.data.stations\n        this.setState({ availability }, () => this.setStationStatus())\n      })\n      .catch(error => {\n        console.log('error 3 ' + error)\n      })\n  }\n\n  setStationStatus () {\n    this.setState(prevState => {\n      const stations = [...prevState.stations]\n\n      this.state.availability.forEach(stationStatus => {\n        const color =\n          (100 * stationStatus.num_bikes_available) /\n          stationStatus.num_docks_available\n        const stationIndex = stations.findIndex(\n          station => station.station_id === stationStatus.station_id\n        )\n        if (typeof stations[stationIndex] !== 'undefined') {\n          stations[stationIndex].color = color\n        }\n      })\n\n      return { stations, loading: false }\n    })\n  }\n\n  render () {\n    return (\n      <div id='cityMonitor' style={segmentAnalyzerStyle}>\n        <RingLoader\n          css={spinnerStyle}\n          sizeUnit='px'\n          size={150}\n          color='#36D7B7'\n          loading={this.state.loading}\n        />\n        <CityMonitorMap stations={this.state.stations} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport ReactGA from 'react-ga'\nimport Home from './pages/home/Home'\nimport SegmentAnalyzer from './pages/segmentAnalyzer/SegmentAnalyzer'\nimport Form from './pages/form/form'\nimport Animation from './pages/animation/animation'\nimport CityMonitor from './pages/cityMonitor/cityMonitor'\n\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize(process.env.REACT_APP_TRACKING_CODE)\n  ReactGA.pageview('/')\n}\n\nconst fouroffour = () => (\n  <div\n    style={{\n      position: 'absolute',\n      width: '100%',\n      top: '50%',\n      textAlign: 'center'\n    }}\n  >\n    The page you are looking for does not exist.\n  </div>\n)\n\nconst redirectToUrl = urlAddress => {\n  window.location.href = urlAddress\n  return null\n}\n\nexport default class App extends Component {\n  render () {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/strava' component={SegmentAnalyzer} />\n          <Route path='/form' component={Form} />\n          <Route path='/animation' component={Animation} />\n          <Route path='/city' component={CityMonitor} />\n          <Route\n            path='/strava_table'\n            component={() =>\n              redirectToUrl('https://segment-analyzer.herokuapp.com/strava')}\n          />\n          <Route\n            path='/ambient'\n            component={() =>\n              redirectToUrl('https://shielded-peak-50254.herokuapp.com/')}\n          />\n          <Route\n            path='/restart_in_julia'\n            component={() =>\n              redirectToUrl('https://oddeirikigland.github.io/restarts-in-julia/stable/')}\n          />\n          <Route\n            path='/pred_telenor'\n            component={() =>\n              redirectToUrl('https://htmlpreview.github.io/?https://raw.githubusercontent.com/oddeirikigland/Summer-Project-Smarte-bygg/master/models/all_models.html')}\n          />\n\n          <Route component={fouroffour} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { config } from 'dotenv'\n\nconfig()\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}